fig_cum
head(df[,1:8])
head(df_trees[,1:8])
df_planted_cum
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/15", "01/01/18"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
fig_cum
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/15", "01/01/16"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
# Printing scatter area
fig_histogram
fig_scatter
fig_cum
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
fig_scatter
fig_cum
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
df_trees_dead
df_trees_alive
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
nbins = max(df_trees$life_time)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# sum months of leaving of the trees
df_trees$life_time = rowSums(df_trees[,4:end_date_index], na.rm=TRUE)
# create data-frames with alive and dead trees
df_trees_dead = df_trees[is.na(df_trees[,end_date]) ,]
df_trees_alive = df_trees[!is.na(df_trees[,end_date]) ,]
# compute number of bis of histogram
nbins = max(df_trees$life_time)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# sum months of leaving of the trees
df_trees$life_time = rowSums(df_trees[,4:end_date_index], na.rm=TRUE)
# create data-frames with alive and dead trees
df_trees_dead = df_trees[is.na(df_trees[,end_date]) ,]
df_trees_alive = df_trees[!is.na(df_trees[,end_date]) ,]
# compute number of bis of histogram
nbins = max(df_trees$life_time)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# sum months of leaving of the trees
df_trees$life_time = rowSums(df_trees[,4:end_date_index], na.rm=TRUE)
# create data-frames with alive and dead trees
df_trees_dead = df_trees[is.na(df_trees[,end_date]) ,]
df_trees_alive = df_trees[!is.na(df_trees[,end_date]) ,]
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
df_trees_dead
df_trees_alive
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
df_trees_alive
df_trees_dead
end_date
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
end_date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
colnames(df_trees)
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
last_index
df_trees = df_trees[1: last_index, ]
# sum months of leaving of the trees
df_trees$life_time = rowSums(df_trees[,4:end_date_index], na.rm=TRUE)
df_trees$life_time
# create data-frames with alive and dead trees
df_trees_dead = df_trees[is.na(df_trees[,end_date]) ,]
df_trees_dead
# compute number of bis of histogram
nbins = max(df_trees$life_time)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(df_trees_alive, x = ~life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(df_trees_dead, x = ~life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
df_trees_alive = df_trees[!is.na(df_trees[,end_date]) ,]
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(df_trees_alive, x = ~life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(df_trees_dead, x = ~life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/13", "01/01/14"), format="%m/%d/%y")
#remove duplicates
df_trees = df_trees[duplicated(df_trees[,"lon"]),]
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
df_trees_dead$life_time
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
transform date in strings and remove Xs from column dates
colnames(df_trees) = gsub("X", "", colnames(df_trees), fixed=T)
start_date = gsub("-",".", as.character(date[1]), fixed=T)
end_date = gsub("-",".", as.character(date[2]), fixed=T)
# remove trees after the input end date
dfg = data.frame(colnames(df_trees))
end_date_index = which(dfg[,1]==end_date)
df_trees = df_trees[,1:end_date_index]
# filter non existing trees
last_index= tail(which(df_trees[ ,grepl(end_date, names(df_trees))] == 1), 1)
df_trees = df_trees[1: last_index, ]
# sum months of leaving of the trees
df_trees$life_time = rowSums(df_trees[,4:end_date_index], na.rm=TRUE)
# create data-frames with alive and dead trees
df_trees_dead = df_trees[is.na(df_trees[,end_date]) ,]
df_trees_alive = df_trees[!is.na(df_trees[,end_date]) ,]
# compute number of bis of histogram
nbins = max(df_trees$life_time)
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
fig <- plot_ly(alpha = 0.6, nbinsx=nbins)
fig <- fig %>% add_histogram(x = df_trees_alive$life_time, name="alive",
marker = list(color="green"),
opacity=0.6)
fig <- fig %>% add_histogram(x = df_trees_dead$life_time, name= "downed",
marker = list(color="red"),
opacity=0.6)
fig <- fig %>% layout(barmode = "overlay",
yaxis = list(title = "Num. of trees"),
xaxis = list(title = "Months of Life"))
fig
df_trees_dead
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
fig_cum
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/18", "01/01/20"), format="%m/%d/%y")
# modify data-frame
df_trees = treat_dataframe(df_trees, date)
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
# Printing scatter area
fig_histogram
fig_scatter
fig_cum
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
source("C:/Users/ricar/tree-life/main.R", echo=TRUE)
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/18", "01/01/20"), format="%m/%d/%y")
# modify data-frame
df_trees = treat_dataframe(df_trees, date)
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
fig_scatter
heah(df_2[,1:7])
head(df_2[,1:7])
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/18", "01/01/20"), format="%m/%d/%y")
# modify data-frame
df_trees = treat_dataframe(df_trees, date)
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
fig_scatter
source("C:/Users/ricar/tree-life/utils.R", echo=TRUE)
#load data
df_trees = read.csv("tree-data.csv")
# define date interval
date = as.Date(c("01/01/18", "01/01/20"), format="%m/%d/%y")
# modify data-frame
df_trees = treat_dataframe(df_trees, date)
# create scatter map
fig_scatter = generate_scattermap(df_trees,date)
# create age living histogram
fig_histogram = generate_histrogram(df_tress,date)
# create cumulative curve
fig_cum = generate_cumulative(df_trees, date)
fig_scatter
df_trees = read.csv("tree-data.csv")
colnames(df_trees)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
